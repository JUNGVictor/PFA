#lang racket/gui

(require rackunit rsound rsound/piano-tones)

(printf "Host-APIs disponibles: ~a~n" (all-host-apis))
(host-api 'paMME)


(define (note->number)
  (define note (send CHOICENOTE get-selection))
  (define gamme (send CHOICERANGE get-value))
  (+ (* (+ gamme 1) 12) note))

(define PLAY #f)
(define ACC 0)
;#############################GUI
(define SIZE 800) ;Taille du canvas
(define MARGIN 22) ;Taille de la marge sur les 4 cotés
(define LITTLESPACE 2) ;Moitié de la taille de l'espace entre chaque carré
(define NBSQUARESWIDTH 12) ;Nombre de carrés sur une ligne
(define SIZESQUARE (/ (- SIZE (* 2 MARGIN)) NBSQUARESWIDTH)) ;Largeur d'un carré (n'est pas la largeur du carré qui s'affichera) , sert essentiellement au placement des carrés dans le canvas
(define HALFSIZE (/ SIZESQUARE 2)) ;Moitié de la largeur d'un carré (même utilité que SIZESQUARE)
(define REALHALFSIZE (- HALFSIZE LITTLESPACE)) ;Moitié de la largeur d'un carré affiché
(define REALSIZE (* REALHALFSIZE 2)) ;Largeur d'un carré affiché
(define FIRSTSQUARE 144) ;Numéro du premier carré avec un son non nul
(define LASTSQUARE -1) ;Numéro du dernier carré avec un son non nul

(define FRAME
  (new frame%
       (label "Nom du projet")
       (stretchable-width #f)
       (stretchable-height #f)))

(define HPANEL
  (new horizontal-panel%
       (parent FRAME)
       (alignment '(center center))))


;####################Panneau pour éditer un objet square%
(define VPANELEDITION
  (new vertical-panel%
       (parent HPANEL)
       (alignment '(center top))
       (min-width 200)))

;Indiquer le carré sélectionné
(define TITLEEDITION
  (new message%
       (parent VPANELEDITION)
       (label "Carré n°1     ")
       (vert-margin 30)))

;On charge les valeurs du carré selectionné

;Choisir la gamme
(define CHOICERANGE   ;
  (new slider%
       (parent VPANELEDITION)
       (label "Gamme")
       (style '(vertical))
       (min-value 1)
       (max-value 8)
       (init-value 5)
       (min-height 100)
       (stretchable-height #f)))

;Choisir la note
(define CHOICENOTE   ;
  (new choice%
       (parent VPANELEDITION)
       (label "Note")
       (choices '("Do" "Do#" "Ré" "Ré#" "Mi" "Fa" "Fa#" "Sol" "Sol#" "La" "La#" "Si"))))

;Ecouter la note actuelle
(define BOUTTONTEST
  (new button%
       (parent VPANELEDITION)
       (vert-margin 20)
       (label "Test")
       (callback
        (lambda (b evt)
               (play (piano-tone (note->number)))))))

;Choisir après combien de temps la prochaine note se joue
(define CHOICEDURATION
  (new text-field%
       (parent VPANELEDITION)
       (vert-margin 30)
       (label "Durée en secondes :")
       (init-value "0.2")))

(define IGNORESQUARE
  (new check-box%
       (parent VPANELEDITION)
       (vert-margin 30)
       (label "Ignorer ? ")
       (callback
        (lambda (b evt)
          (define numerocarre (- (string->number (first (regexp-match "[0-9]+" (send TITLEEDITION get-label)))) 1))
          (send (vector-ref ALLSQUARES numerocarre) toggleIgnore)))))

;Copie les caractéristiques du carré sélectionné
(define BUTTONCOPY
  (new button%
       (parent VPANELEDITION)
       (vert-margin 10)
       (label "Copier")
       (callback
        (lambda (b evt)
          (copyValues)))))

;Ecris les valeurs enregistrées par le bouton "Copier" dans les champs correspondants
(define BUTTONPASTE
  (new button%
       (parent VPANELEDITION)
       (vert-margin 10)
       (label "Coller")
       (callback
        (lambda (b evt)
          (pasteValues)))))

;Applique les valeurs rentrées au carré sélectionné
(define BUTTONSET
  (new button%
       (parent VPANELEDITION)
       (vert-margin 10)
       (min-width 200)
       (label "Appliquer les\nchangements")
       (callback
        (lambda (b evt)
          (define numerocarre (- (string->number (first (regexp-match "[0-9]+" (send TITLEEDITION get-label)))) 1))
          (define duree (string->number (send CHOICEDURATION get-value)))
          (define note (make-note (note->number) (send CHOICERANGE get-value)))
          (define ignore? (send IGNORESQUARE get-value))
          (setTypedValue numerocarre (list note "green" ignore? duree))
          (when (> FIRSTSQUARE numerocarre) (set! FIRSTSQUARE numerocarre))
          (when (< LASTSQUARE numerocarre) (set! LASTSQUARE numerocarre))
          (send CANVAS refresh-now)))))

(define BUTTONRESET
  (new button%
       (parent VPANELEDITION)
       (vert-margin 10)
       (min-width 200)
       (label "Remettre par\ndéfaut")
       (callback
        (lambda (b evt)
          (define numerocarre (- (string->number (first (regexp-match "[0-9]+" (send TITLEEDITION get-label)))) 1))
          (define note (make-note null null))
          (define duree 0.2)
          (setTypedValue numerocarre (list note "gray" duree #f))
          (when (and (= FIRSTSQUARE numerocarre) (= LASTSQUARE numerocarre))
            (set! FIRSTSQUARE 144)
            (set! LASTSQUARE -1))
          (when (= FIRSTSQUARE numerocarre) (set! FIRSTSQUARE (searchFirstSquare FIRSTSQUARE FIRSTSQUARE)))
          (when (= LASTSQUARE numerocarre) (set! LASTSQUARE (searchLastSquare LASTSQUARE LASTSQUARE)))
          (send CANVAS refresh-now)))))


;####################Canvas
(define S #f)
(define (findSquare x y v)
  (for ([square (in-vector v)])
    (define posX (send square getPosX))
    (define posY (send square getPosY))
    (if (and (and (>= x (- posX REALHALFSIZE))
                  (<= x (+ posX REALHALFSIZE)))
             (and (>= y (- posY REALHALFSIZE))
                  (<= y (+ posY REALHALFSIZE))))
        (set! S square)
        (void))))

(define MY-CANVAS%
  (class canvas%
    (define/override (on-event evt)
      (case (send evt get-event-type)
        ((left-down) (define posx (send evt get-x))
                     (define posy (send evt get-y))
                     (findSquare posx posy ALLSQUARES)
                     (when S
                       (loadSquare (send S getNumber))
                       (send SELECTEUR changePosX! (send S getPosX))
                       (send SELECTEUR changePosY! (send S getPosY))
                       (send SELECTEUR changeNum! (send S getNumber))
                       (send this refresh-now)))
        (else (set! S #f))))
    (super-new)))
          
(define CANVAS
  (new MY-CANVAS%
       (parent HPANEL)
       (style '(border))
       (min-width SIZE)
       (min-height SIZE)
       (paint-callback
        (lambda (c dc)
          (send dc clear)
          (if PLAY
              (void)
              (send SELECTEUR draw-with dc))
          (for ([square (in-vector ALLSQUARES)])
            (send square draw-with dc))))))


;####################Panneau des options
(define VPANELSETTINGS
  (new vertical-panel%
       (parent HPANEL)
       (alignment '(center top))
       (min-width 200)))

(define TITLESETTINGS
  (new message%
       (parent VPANELSETTINGS)
       (vert-margin 30)
       (label "Options")))


(define LECTUREOPTION   ;Option de lecture (par défaut, tout jouer)
  (new choice%
       (parent VPANELSETTINGS)
       (label "Lecture :")
       (choices '("Tout jouer" "Ignorer les carrés gris" "Ignorer B/A"))))

;Permet de jouer la partition en boucle
(define LOOP
  (new check-box%
       (parent VPANELSETTINGS)
       (vert-margin 30)
       (label "Jouer en boucle")))

;Permet de jouer à partir du selecteur
(define PLAYSELECTOR
  (new check-box%
       (parent VPANELSETTINGS)
       (vert-margin 30)
       (label "Jouer à partir\ndu selecteur")))

;Commence à jouer la partition depuis le carré sélectionné
(define BUTTONPLAY
  (new button%
       (parent VPANELSETTINGS)
       (vert-margin 100)
       (min-height 200)
       (min-width 200)
       (label "Jouer")
       (callback (lambda (b evt)
                   (if PLAY
                       (begin (set! PLAY #f)
                              (set! ACC 0)
                              (send BUTTONPLAY set-label "Jouer"))
                       (begin (set! PLAY #t)
                              (when (send PLAYSELECTOR get-value) (set! ACC (- (send SELECTEUR getNum) 1)))
                              (send PLAYALLSQUARE start 0)
                              (send BUTTONPLAY set-label "Stop")))))))

(send FRAME show #t)


(define (sec n)
(inexact->exact (round (* n 44100))))

(define selecteur% ;Affiche le carré que l'on modifie
  (class object%
    (public getPosX getPosY changePosX! changePosY! changeNum! getNum draw-with)
    (define posX -1000)
    (define posY -1000)
    (define number 0)
    ;Récupérer la position x
    (define (getPosX)
      posX)
    ;Récupérer la position y
    (define (getPosY)
      posY)
    ;Changer la position x
    (define (changePosX! x)
      (set! posX x))
    ;Changer la position y
    (define (changePosY! y)
      (set! posY y))
    ;Change le numero du carré selectionné
    (define (changeNum! num)
      (set! number num))
    ;Donne le numéro du carré selectionné
    (define (getNum)
      number)
    
    (define (draw-with the-current-dc)
      (send the-current-dc set-brush "blue" 'solid)
      (send the-current-dc draw-rectangle (- posX HALFSIZE) (- posY HALFSIZE) SIZESQUARE SIZESQUARE))
    (super-new)))

(define SELECTEUR (new selecteur%))
      
    

(define (squares% n)
  (class object%                     
    ;On donne accès à ces fonctions :
    (public not-sound? getSound getColor getNumber getDuration getPosX getPosY giveValues isIgnored? playSound changeSound changeColor toggleIgnore changeDuration giveAll changeAll draw-with)

    (define number n)            ;numéro du carré
    (define sound (make-note null null))          ;pas de son par défaut - son : structure
    (define color "gray")         ;couleur grise
    (define ignore? #f)          ;non ignoré
    (define duration 0.2)          ;durée avant de passer au carré suivant (en secondes)
    (define posX (+ MARGIN (+ (* (modulo (- number 1) NBSQUARESWIDTH) SIZESQUARE) HALFSIZE)))    ;position x du milieu du carré
    (define posY (+ MARGIN (+ (* (quotient (- number 1) NBSQUARESWIDTH) SIZESQUARE) HALFSIZE)))  ;position y du milieu du carré
    ;#######################################
    ;RECUPERATION DES VARIABLES
    ;RECUPERER TOUTES LES VARIABLES (sauf numero)
    (define (giveAll)
      (list sound color ignore? duration))
    ;Un son est-il défini? #t si non, #f si oui
    (define (not-sound?)
      (null? (note-num sound)))
    ;Recupérer le son
    (define (getSound)
      sound)
    ;Recupérer la duree
    (define (getDuration)
      duration)
    ;Récupérer la couleur
    (define (getColor)
      color)
    ;Récupérer le numéro du carré
    (define (getNumber)
      number)
    ;Récupérer la positon x du carré
    (define (getPosX)
      posX)
    ;Récupérer la position y du carré
    (define (getPosY)
      posY)
    ;Recupere les valeurs sound, color et duration dans une liste
    (define (giveValues)
      (list sound color duration))
    ;Le triangle est-il ignoré? (si oui, on ne le joue pas)
    (define (isIgnored?)
      ignore?)
    ;Jouer le son
    (define (playSound)
      (play (piano-tone (note-num sound))))
    ;#######################################
    ;MODIFICATION DES VARIABLES
    ;CHANGE TOUTES LES VARIABLES
    (define (changeAll liste)    ;liste : (list sound color ignore? duration)
      (set! sound (car liste))
      (set! color (cadr liste))
      (set! ignore? (caddr liste))
      (set! duration (cadddr liste)))
    
    ;Changer la note du triangle
    (define (changeSound note)
      (set! sound note))
    ;Changer la couleur du triangle
    (define (changeColor newcolor)
      (set! color newcolor))
    ;Toggle la variable bool ignore?
    (define (toggleIgnore)
      (set! ignore? (not ignore?)))
    ;Changer la durée avant de passer au triangle suivant
    (define (changeDuration dur)
      (set! duration dur))
    ;Le carré se dessine
    (define (draw-with the-current-dc)
      (send the-current-dc set-brush color 'solid)
      (send the-current-dc draw-rectangle (- posX REALHALFSIZE) (- posY REALHALFSIZE) REALSIZE REALSIZE))

    (super-new)))

(define (generateSquares n)
  (build-vector n (lambda(i) (new (squares% (+ i 1))))))

(define-struct note (num gamme) #:transparent)

(define (setTypedValue n list)                 ;On change les valeurs du carré n par celles contenues dans la liste (sound color duration ignore)
  (define square (vector-ref ALLSQUARES n))
  (send square changeAll list))


(define ALLSQUARES (generateSquares (* NBSQUARESWIDTH NBSQUARESWIDTH)))
(define NBSQUARES (vector-length ALLSQUARES))

(define (loadSquare n)      ;On affiche les valeurs actuelles du carré dans l'éditeur
  (define oldsquare (vector-ref ALLSQUARES (- (string->number (first (regexp-match "[0-9]+" (send TITLEEDITION get-label)))) 1)))
  (define square (vector-ref ALLSQUARES (- n 1)))   ;Le carré à copier
  (define note (send square getSound))              ;On récupere la note
  (define num (note-num note))                      ;On récupere le numéro de la note
  (define gamme (note-gamme note))                  ;On récupere la gamme de la note
  (define ignore? (send square isIgnored?))
  (send TITLEEDITION set-label (string-append "Carré n°" (number->string (send square getNumber))))
  (if (and (not (null? num)) (not (null? gamme)))
      (begin (send CHOICENOTE set-selection (modulo num 12))
             (send CHOICERANGE set-value gamme))
      (begin (send CHOICENOTE set-selection 0)
             (send CHOICERANGE set-value 5)))
  (send IGNORESQUARE set-value ignore?)
  (send CHOICEDURATION set-value (number->string (send square getDuration))))

(define copiedValues (list null "gray" #f 0)) ;Valeur de la copie (par défaut)

(define (copyValues)     ;On renvoie la liste des valeurs du carré en cours d'édition
  (define numero (- (string->number (first (regexp-match "[0-9]+" (send TITLEEDITION get-label)))) 1))
  (define square (vector-ref ALLSQUARES numero))
  (set! copiedValues (send square giveAll)))


(define (pasteValues)   ;On colle les valeurs de la liste copiedValues dans la note sélectionnée
  (define numero (- (string->number (first (regexp-match "[0-9]+" (send TITLEEDITION get-label)))) 1))
  (define square (vector-ref ALLSQUARES numero))
  (send square changeAll copiedValues)
  (loadSquare (+ 1 numero))
  (send CANVAS refresh-now))

(define (searchFirstSquare FIRST newFirst)
  (if (= newFirst (vector-length ALLSQUARES))
      144
      (if (and (not (send (vector-ref ALLSQUARES newFirst) not-sound?)) (> newFirst FIRST))
          newFirst
          (searchFirstSquare FIRST (+ 1 newFirst)))))
  
(define (searchLastSquare LAST newLast)
  (if (< newLast 0)
      -1
      (if (and (not (send (vector-ref ALLSQUARES newLast) not-sound?)) (< newLast LAST))
          newLast
          (searchLastSquare LAST (- newLast 1)))))

;#############################Temps
(define PLAYALLSQUARE
  (new timer%
       (notify-callback (lambda ()
                          (if PLAY
                              (if (> ACC (- (vector-length ALLSQUARES) 1))
                                  (if (send LOOP get-value)
                                      (begin (set! ACC 0))
                                      (begin (set! PLAY #f)
                                             (send PLAYALLSQUARE stop)
                                             (send BUTTONPLAY set-label "Jouer")
                                             (set! ACC 0)))
                                  (let* ((square (vector-ref ALLSQUARES ACC))
                                         (note (note-num (send square getSound)))
                                         (duration (send square getDuration))
                                         (oldcolor (send square getColor))
                                         (option (send LECTUREOPTION get-selection)))
                                    (when (= option 0) (playAll square duration note))
                                    (when (= option 1) (ignoreGray square duration note))
                                    (when (= option 2) (ignoreBA square duration note))))
                              (set! ACC 0))))))
                                           
                                    
                              

(define (playAll square duration note)
  (define ignored? (send square isIgnored?))
  (set! ACC (+ ACC 1))
  (if ignored?
      (begin (send PLAYALLSQUARE stop)
             (send PLAYALLSQUARE start 0))
      (if (equal? (send square getColor) "green")
          (begin (play (piano-tone note))
                 (send PLAYALLSQUARE stop)
                 (send PLAYALLSQUARE start (inexact->exact (floor (* duration 1000)))))
          (begin (send PLAYALLSQUARE stop)
                 (send PLAYALLSQUARE start (inexact->exact (floor (* duration 1000))))))))

(define (ignoreGray square duration note)
  (define ignored? (send square isIgnored?))
  (set! ACC (+ ACC 1))
  (if ignored?
      (begin (send PLAYALLSQUARE stop)
             (send PLAYALLSQUARE start 0))
      (if (equal? (send square getColor) "green")
          (begin (play (piano-tone note))
                 (send PLAYALLSQUARE stop)
                 (send PLAYALLSQUARE start (inexact->exact (floor (* duration 1000)))))
          (begin (send PLAYALLSQUARE stop)
                 (send PLAYALLSQUARE start 0)))))

(define (ignoreBA square duration note)
  (define ignored? (send square isIgnored?))
  (set! ACC (+ ACC 1))
  (if ignored?
      (begin (send PLAYALLSQUARE stop)
             (send PLAYALLSQUARE start 0))
      (if (equal? (send square getColor) "green")
          (begin (play (piano-tone note))
                 (send PLAYALLSQUARE stop)
                 (send PLAYALLSQUARE start (inexact->exact (floor (* duration 1000)))))
          (if (< (- (send square getNumber) 1) FIRSTSQUARE)
              (begin (send PLAYALLSQUARE stop)
                     (send PLAYALLSQUARE start 0))
              (if (> (- (send square getNumber) 1) LASTSQUARE)
                  (begin (send PLAYALLSQUARE stop)
                         (send PLAYALLSQUARE start 0))
                  (begin (send PLAYALLSQUARE stop)
                         (send PLAYALLSQUARE start (inexact->exact (floor (* duration 1000))))))))))
  
